{"ast":null,"code":"import _classCallCheck from \"F:\\\\Users\\\\Rodney\\\\Documents\\\\WebDevelopment\\\\react-redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\Users\\\\Rodney\\\\Documents\\\\WebDevelopment\\\\react-redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\Users\\\\Rodney\\\\Documents\\\\WebDevelopment\\\\react-redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\Users\\\\Rodney\\\\Documents\\\\WebDevelopment\\\\react-redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\Users\\\\Rodney\\\\Documents\\\\WebDevelopment\\\\react-redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"F:\\\\Users\\\\Rodney\\\\Documents\\\\WebDevelopment\\\\react-redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"F:\\\\Users\\\\Rodney\\\\Documents\\\\WebDevelopment\\\\react-redux\\\\src\\\\Header.js\";\nimport React, { Component } from 'react';\nimport store from './store';\nimport setSelectedGame from './actions';\nimport removeGame from './actions';\nimport addGame from './actions/addGame.js';\nimport 'font-awesome/css/font-awesome.min.css';\nimport { default as GamesDropdown } from './GamesDropdown';\nimport { default as Status } from './Status';\nimport './App.css';\n/*Class for the header section for project, that contains the controls\r\n  for the application.*/\n\nvar Header =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Header, _Component);\n\n  function Header(props) {\n    var _this;\n\n    _classCallCheck(this, Header);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Header).call(this, props));\n    /*gameValue and gameName are separate state variables so that GamesDropdown\r\n      isn't updated everytime something is typed in the textbox. Instead it is\r\n      only updated when the add game button is clicked.*/\n\n    _this.state = {\n      gameName: \"\",\n      gameValue: \"\",\n      statusGood: false,\n      statusBad: false\n    };\n    _this.handleOnChange_tbGame = _this.handleOnChange_tbGame.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleOnClick_btAddGame = _this.handleOnClick_btAddGame.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleOnClick_btRemoveGame = _this.handleOnClick_btRemoveGame.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleOnClick_btMoveGameToTop = _this.handleOnClick_btMoveGameToTop.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setStatusBad = _this.setStatusBad.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setStatusGood = _this.setStatusGood.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } //Sets statusBad based on response from HeaderStatus.\n\n\n  _createClass(Header, [{\n    key: \"setStatusBad\",\n    value: function setStatusBad(statusBad) {\n      this.setState({\n        statusBad: statusBad\n      });\n    } //Sets statusGood based on response from HeaderStatus.\n\n  }, {\n    key: \"setStatusGood\",\n    value: function setStatusGood(statusGood) {\n      this.setState({\n        statusGood: statusGood\n      });\n    } //OnClick event for the add game button.\n\n  }, {\n    key: \"handleOnClick_btAddGame\",\n    value: function handleOnClick_btAddGame(e) {\n      var gameName = this.state.gameName;\n      var games = store.getState().games;\n\n      for (var i = 0; i < games.length; i++) {\n        if (games[i] === gameName) {\n          this.setState({\n            statusBad: true\n          }, this.setState({\n            statusBad: false\n          }));\n          return;\n        }\n      }\n\n      store.dispatch(addGame(gameName));\n      this.setState({\n        gameValue: gameName\n      }, this.setGameComboBoxLocalStorage); //When a game is added it becomes the selected game.\n\n      store.dispatch(setSelectedGame(this.state.gameName));\n      /*Clear text box after addition of game and set statusGood\r\n        to true because the addition was successful.*/\n\n      this.setState({\n        gameName: \"\",\n        statusGood: true\n      });\n    } //OnClick event for the remove game button.\n\n  }, {\n    key: \"handleOnClick_btRemoveGame\",\n    value: function handleOnClick_btRemoveGame(e) {\n      store.dispatch(removeGame(this.state.gameValue));\n      this.setSelectedGameToFirstAndComboBoxLocalStorage();\n    } //OnClick event for the move game to top button.\n\n  }, {\n    key: \"handleOnClick_btMoveGameToTop\",\n    value: function handleOnClick_btMoveGameToTop(e) {\n      var games = this.state.games;\n\n      for (var i = 0; i < games.length; i++) {\n        if (games[i] === this.props.selectedGame) {\n          games.unshift(games[i]);\n          games.splice(i + 1, 1);\n          break;\n        }\n      }\n\n      this.setState({\n        games: games\n      }, this.setGameComboBoxLocalStorage);\n    } //OnChange event for when the text in the game text box changes.\n\n  }, {\n    key: \"handleOnChange_tbGame\",\n    value: function handleOnChange_tbGame(e) {\n      this.setState({\n        gameName: e.target.value\n      });\n    }\n    /*Just calls setSelectedGame() and setGameComboBoxLocalStorage(). Used\r\n      for setState callbacks.*/\n\n  }, {\n    key: \"setSelectedGameToFirstAndComboBoxLocalStorage\",\n    value: function setSelectedGameToFirstAndComboBoxLocalStorage() {\n      this.setSelectedGameToFirst();\n      this.setGameComboBoxLocalStorage();\n    }\n    /*Sets the selected game to the first in the array if\r\n      length is greater than 0. Used after removal of a game\r\n      and when initially loading the game dropdown.*/\n\n  }, {\n    key: \"setSelectedGameToFirst\",\n    value: function setSelectedGameToFirst() {\n      var games = store.getState().games;\n      if (games.length > 0) store.dispatch(setSelectedGame(games[0]));else if (games.length === 0) store.dispatch(setSelectedGame(\"\"));\n    }\n    /*Sets the local storage after addition, removal, or moving up\r\n      of a game.*/\n\n  }, {\n    key: \"setGameComboBoxLocalStorage\",\n    value: function setGameComboBoxLocalStorage() {\n      var games = store.getState().games;\n      var toLocalStoreString = games.join(\",;:!\");\n      localStorage.setItem('games', JSON.stringify(toLocalStoreString));\n    }\n    /*Render the Header with the add game textbox, add game button,\r\n      games dropdown, remove game button, move game to top button, and status*/\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        id: \"add-game-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        value: this.state.gameName,\n        onChange: this.handleOnChange_tbGame,\n        className: \"text-field fa\",\n        placeholder: \"\\uF11B Game to Add\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.handleOnClick_btAddGame,\n        id: \"btn-game-to-add\",\n        className: \"btn fa fa-plus\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(GamesDropdown, {\n        gameValue: this.state.gameValue,\n        games: store.getState().games,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.handleOnClick_btRemoveGame,\n        className: \"btn fa fa-trash\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.handleOnClick_btMoveGameToTop,\n        className: \"btn fa fa-arrow-up\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      })), React.createElement(Status, {\n        setStatusGood: this.setStatusGood,\n        statusGood: this.state.statusGood,\n        setStatusBad: this.setStatusBad,\n        statusBad: this.state.statusBad,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Header;\n}(Component);\n\nexport default Header;","map":{"version":3,"sources":["F:\\Users\\Rodney\\Documents\\WebDevelopment\\react-redux\\src\\Header.js"],"names":["React","Component","store","setSelectedGame","removeGame","addGame","default","GamesDropdown","Status","Header","props","state","gameName","gameValue","statusGood","statusBad","handleOnChange_tbGame","bind","handleOnClick_btAddGame","handleOnClick_btRemoveGame","handleOnClick_btMoveGameToTop","setStatusBad","setStatusGood","setState","e","games","getState","i","length","dispatch","setGameComboBoxLocalStorage","setSelectedGameToFirstAndComboBoxLocalStorage","selectedGame","unshift","splice","target","value","setSelectedGameToFirst","toLocalStoreString","join","localStorage","setItem","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport store from './store';\r\nimport setSelectedGame from './actions';\r\nimport removeGame from './actions';\r\nimport addGame from './actions/addGame.js';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport {default as GamesDropdown} from './GamesDropdown';\r\nimport {default as Status} from './Status';\r\nimport './App.css';\r\n\r\n/*Class for the header section for project, that contains the controls\r\n  for the application.*/\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    /*gameValue and gameName are separate state variables so that GamesDropdown\r\n      isn't updated everytime something is typed in the textbox. Instead it is\r\n      only updated when the add game button is clicked.*/\r\n    this.state = {\r\n      gameName: \"\",\r\n      gameValue: \"\",\r\n      statusGood: false,\r\n      statusBad: false\r\n    }\r\n\r\n    this.handleOnChange_tbGame = this.handleOnChange_tbGame.bind(this);\r\n    this.handleOnClick_btAddGame = this.handleOnClick_btAddGame.bind(this);\r\n    this.handleOnClick_btRemoveGame = this.handleOnClick_btRemoveGame.bind(this);\r\n    this.handleOnClick_btMoveGameToTop = this.handleOnClick_btMoveGameToTop.bind(this);\r\n    this.setStatusBad = this.setStatusBad.bind(this);\r\n    this.setStatusGood = this.setStatusGood.bind(this);\r\n  }\r\n\r\n  //Sets statusBad based on response from HeaderStatus.\r\n  setStatusBad(statusBad) {\r\n    this.setState({statusBad: statusBad});\r\n  }\r\n\r\n  //Sets statusGood based on response from HeaderStatus.\r\n  setStatusGood(statusGood) {\r\n    this.setState({statusGood: statusGood});\r\n  }\r\n\r\n  //OnClick event for the add game button.\r\n  handleOnClick_btAddGame(e) {\r\n    const gameName = this.state.gameName;\r\n    const games = store.getState().games;\r\n\r\n    for (let i = 0; i < games.length; i++)\r\n      if (games[i] === gameName) {\r\n        this.setState({statusBad: true}, this.setState({statusBad: false}));\r\n        return;\r\n      }\r\n\r\n    store.dispatch(addGame(gameName));\r\n    this.setState({gameValue: gameName}, this.setGameComboBoxLocalStorage);\r\n\r\n    //When a game is added it becomes the selected game.\r\n    store.dispatch(setSelectedGame(this.state.gameName));\r\n\r\n    /*Clear text box after addition of game and set statusGood\r\n      to true because the addition was successful.*/\r\n    this.setState({\r\n      gameName: \"\",\r\n      statusGood: true\r\n    });\r\n  }\r\n\r\n  //OnClick event for the remove game button.\r\n  handleOnClick_btRemoveGame(e) {\r\n    store.dispatch(removeGame(this.state.gameValue));\r\n\r\n    this.setSelectedGameToFirstAndComboBoxLocalStorage();\r\n  }\r\n\r\n  //OnClick event for the move game to top button.\r\n  handleOnClick_btMoveGameToTop(e) {\r\n    const games = this.state.games;\r\n\r\n    for (let i = 0; i < games.length; i++)\r\n      if (games[i] === this.props.selectedGame) {\r\n        games.unshift(games[i]);\r\n        games.splice(i + 1, 1);\r\n        break;\r\n      }\r\n\r\n    this.setState({games: games}, this.setGameComboBoxLocalStorage);\r\n  }\r\n\r\n  //OnChange event for when the text in the game text box changes.\r\n  handleOnChange_tbGame(e) {\r\n    this.setState({gameName: e.target.value});\r\n  }\r\n\r\n  /*Just calls setSelectedGame() and setGameComboBoxLocalStorage(). Used\r\n    for setState callbacks.*/\r\n  setSelectedGameToFirstAndComboBoxLocalStorage() {\r\n    this.setSelectedGameToFirst();\r\n    this.setGameComboBoxLocalStorage();\r\n  }\r\n\r\n  /*Sets the selected game to the first in the array if\r\n    length is greater than 0. Used after removal of a game\r\n    and when initially loading the game dropdown.*/\r\n  setSelectedGameToFirst() {\r\n    const games = store.getState().games;\r\n\r\n    if (games.length > 0)\r\n      store.dispatch(setSelectedGame(games[0]));\r\n    else if (games.length === 0)\r\n      store.dispatch(setSelectedGame(\"\"));\r\n  }\r\n\r\n  /*Sets the local storage after addition, removal, or moving up\r\n    of a game.*/\r\n  setGameComboBoxLocalStorage() {\r\n    const games = store.getState().games;\r\n\r\n    let toLocalStoreString = games.join(\",;:!\");\r\n    localStorage.setItem('games', JSON.stringify(toLocalStoreString));\r\n  }\r\n\r\n  /*Render the Header with the add game textbox, add game button,\r\n    games dropdown, remove game button, move game to top button, and status*/\r\n  render() {\r\n    return (\r\n      <div id=\"add-game-container\">\r\n        <input value={this.state.gameName} onChange={this.handleOnChange_tbGame} className=\"text-field fa\" placeholder=\"&#xf11b; Game to Add\"></input>\r\n        <button onClick={this.handleOnClick_btAddGame} id=\"btn-game-to-add\" className=\"btn fa fa-plus\"></button>\r\n\r\n        <div>\r\n          <GamesDropdown gameValue={this.state.gameValue} games={store.getState().games}/>\r\n          <button onClick={this.handleOnClick_btRemoveGame} className=\"btn fa fa-trash\"></button>\r\n          <button onClick={this.handleOnClick_btMoveGameToTop} className=\"btn fa fa-arrow-up\"></button>\r\n        </div>\r\n        <Status setStatusGood={this.setStatusGood} statusGood={this.state.statusGood} setStatusBad={this.setStatusBad} statusBad={this.state.statusBad} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n"]},"metadata":{},"sourceType":"module"}