{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\src\\\\HeaderStatus.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport ReactCSSTransitionReplace from 'react-css-transition-replace';\n\nvar HeaderStatus =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(HeaderStatus, _Component);\n\n  function HeaderStatus(props) {\n    _classCallCheck(this, HeaderStatus);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HeaderStatus).call(this, props));\n  } // componentDidUpdate(prevProps, prevState) {\n  //   const { statusBad, statusGood } = this.state;\n  //   console.log(\"prev: \" + prevProps.statusBad + \" this.stats: \" + statusBad + \" this.props: \" + this.props.statusBad + \" prevState: \" + prevState.statusBad);\n  //   if (statusBad) {\n  //     this.setState({statusBad: true});\n  //   //  this.props.handleStatus(true, false);\n  //     //setTimeout(() => {this.props.handleStatus(false, false)}, 3000);\n  //   } else if (this.props.statusGood !== prevProps.statusGood) {\n  //     this.setState({statusGood: this.props.statusGood});\n  //     setTimeout(() => {this.setState({statusGood: false})}, 3000);\n  //   }\n  // }\n  // componentWillReceiveProps(nextProps) {\n  //   console.log(\"will recieve: \" + this.state.statusBad);\n  //   if (nextProps.statusBad !== false)\n  //     this.setState({statusBad: nextProps.statusBad});\n  // }\n\n\n  _createClass(HeaderStatus, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      if (!this.props.statusGood && !this.props.statusBad) return React.createElement(ReactCSSTransitionReplace, {\n        transitionName: \"cross-fade\",\n        transitionEnterTimeout: 500,\n        transitionLeaveTimeout: 500,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        key: \"transitioning-component-0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }));else if (this.props.statusGood) return React.createElement(ReactCSSTransitionReplace, {\n        transitionName: \"cross-fade\",\n        transitionEnterTimeout: 500,\n        transitionLeaveTimeout: 500,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        key: \"transitioning-component-1\",\n        className: \"status-good\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"Successful\"));else if (this.props.statusBad) {\n        setTimeout(function () {\n          _this.props.handleStatus(false, false);\n        }, 3000);\n        return React.createElement(ReactCSSTransitionReplace, {\n          transitionName: \"cross-fade\",\n          transitionEnterTimeout: 500,\n          transitionLeaveTimeout: 500,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          key: \"transitioning-component-2\",\n          className: \"status-bad\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, \"Duplicate, nothing added\"));\n      }\n    }\n  }]);\n\n  return HeaderStatus;\n}(Component);\n\nexport default HeaderStatus;","map":{"version":3,"sources":["C:\\Users\\cutep\\reddit-extension\\src\\HeaderStatus.js"],"names":["React","Component","ReactCSSTransitionReplace","HeaderStatus","props","statusGood","statusBad","setTimeout","handleStatus"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,yBAAP,MAAsC,8BAAtC;;IAEMC,Y;;;;;AACJ,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA,qFACXA,KADW;AAElB,G,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;6BAES;AAAA;;AACP,UAAI,CAAC,KAAKA,KAAL,CAAWC,UAAZ,IAA0B,CAAC,KAAKD,KAAL,CAAWE,SAA1C,EACE,OACE,oBAAC,yBAAD;AACE,QAAA,cAAc,EAAC,YADjB;AAEE,QAAA,sBAAsB,EAAE,GAF1B;AAGE,QAAA,sBAAsB,EAAE,GAH1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKE;AAAK,QAAA,GAAG,EAAC,2BAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CADF,CADF,KAUK,IAAI,KAAKF,KAAL,CAAWC,UAAf,EACH,OACE,oBAAC,yBAAD;AACE,QAAA,cAAc,EAAC,YADjB;AAEE,QAAA,sBAAsB,EAAE,GAF1B;AAGE,QAAA,sBAAsB,EAAE,GAH1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKE;AAAK,QAAA,GAAG,EAAC,2BAAT;AAAqC,QAAA,SAAS,EAAC,aAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBALF,CADF,CADG,KAUA,IAAI,KAAKD,KAAL,CAAWE,SAAf,EAA0B;AAC7BC,QAAAA,UAAU,CAAC,YAAM;AAAC,UAAA,KAAI,CAACH,KAAL,CAAWI,YAAX,CAAwB,KAAxB,EAA+B,KAA/B;AAAsC,SAA9C,EAAgD,IAAhD,CAAV;AAEA,eACE,oBAAC,yBAAD;AACE,UAAA,cAAc,EAAC,YADjB;AAEE,UAAA,sBAAsB,EAAE,GAF1B;AAGE,UAAA,sBAAsB,EAAE,GAH1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAKE;AAAK,UAAA,GAAG,EAAC,2BAAT;AAAqC,UAAA,SAAS,EAAC,YAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCALF,CADF;AASD;AACF;;;;EA1DwBP,S;;AA6D3B,eAAeE,YAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport ReactCSSTransitionReplace from 'react-css-transition-replace';\r\n\r\nclass HeaderStatus extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  // componentDidUpdate(prevProps, prevState) {\r\n  //   const { statusBad, statusGood } = this.state;\r\n  //   console.log(\"prev: \" + prevProps.statusBad + \" this.stats: \" + statusBad + \" this.props: \" + this.props.statusBad + \" prevState: \" + prevState.statusBad);\r\n  //   if (statusBad) {\r\n  //     this.setState({statusBad: true});\r\n  //   //  this.props.handleStatus(true, false);\r\n  //     //setTimeout(() => {this.props.handleStatus(false, false)}, 3000);\r\n  //   } else if (this.props.statusGood !== prevProps.statusGood) {\r\n  //     this.setState({statusGood: this.props.statusGood});\r\n  //     setTimeout(() => {this.setState({statusGood: false})}, 3000);\r\n  //   }\r\n  // }\r\n\r\n  // componentWillReceiveProps(nextProps) {\r\n  //   console.log(\"will recieve: \" + this.state.statusBad);\r\n  //   if (nextProps.statusBad !== false)\r\n  //     this.setState({statusBad: nextProps.statusBad});\r\n  // }\r\n\r\n  render() {\r\n    if (!this.props.statusGood && !this.props.statusBad)\r\n      return (\r\n        <ReactCSSTransitionReplace\r\n          transitionName=\"cross-fade\"\r\n          transitionEnterTimeout={500}\r\n          transitionLeaveTimeout={500}\r\n        >\r\n          <div key=\"transitioning-component-0\"></div>\r\n        </ReactCSSTransitionReplace>\r\n      );\r\n    else if (this.props.statusGood)\r\n      return (\r\n        <ReactCSSTransitionReplace\r\n          transitionName=\"cross-fade\"\r\n          transitionEnterTimeout={500}\r\n          transitionLeaveTimeout={500}\r\n        >\r\n          <div key=\"transitioning-component-1\" className=\"status-good\">Successful</div>\r\n        </ReactCSSTransitionReplace>\r\n      );\r\n    else if (this.props.statusBad) {\r\n      setTimeout(() => {this.props.handleStatus(false, false)}, 3000);\r\n\r\n      return (\r\n        <ReactCSSTransitionReplace\r\n          transitionName=\"cross-fade\"\r\n          transitionEnterTimeout={500}\r\n          transitionLeaveTimeout={500}\r\n        >\r\n          <div key=\"transitioning-component-2\" className=\"status-bad\">Duplicate, nothing added</div>\r\n        </ReactCSSTransitionReplace>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default HeaderStatus;\r\n"]},"metadata":{},"sourceType":"module"}