{"ast":null,"code":"import _getPrototypeOf from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _inherits from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\src\\\\PostSection.js\";\nimport React, { Component } from 'react';\nimport './App.css';\n\nvar Stream =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Stream, _Component);\n\n  function Stream(props) {\n    var _this;\n\n    _classCallCheck(this, Stream);\n\n    return _possibleConstructorReturn(_this);\n  }\n\n  _createClass(Stream, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, props.title);\n    }\n  }]);\n\n  return Stream;\n}(Component);\n\nvar Streams =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(Streams, _Component2);\n\n  function Streams(props) {\n    var _this2;\n\n    _classCallCheck(this, Streams);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Streams).call(this, props));\n    _this2.state = {\n      isLoaded: false,\n      posts: []\n    };\n    return _this2;\n  }\n\n  _createClass(Streams, [{\n    key: \"renderPost\",\n    value: function renderPost(data, i) {\n      return React.createElement(Stream, {\n        title: data[i].channel.status,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"openRequest\",\n    value: function openRequest(request, gameName) {\n      var gameNameSplit = gameName.split(\" \");\n      var gameUrl = gameNameSplit.join(\"%20\");\n      request.open(\"GET\", \"https://api.twitch.tv/kraken/streams/?game=\" + gameUrl, true);\n      return request;\n    }\n  }, {\n    key: \"createDivForNoStream\",\n    value: function createDivForNoStream() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"Invalid game name or no one is streaming this game\"));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var gameName = \"Super Smash Bros. Melee\";\n      var request = new XMLHttpRequest();\n      request = this.openRequest(request, gameName);\n      request.setRequestHeader('Client-ID', \"mr14v2oijk1jv4n8u49ixkv6raofcd\");\n      request.send();\n\n      request.onload = function () {\n        var data = JSON.parse(request.response);\n\n        if (request.status >= 200 && request.status < 400) {\n          this.setState({\n            isLoaded: true,\n            posts: data.streams\n          });\n        }\n      }.bind(this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          isLoaded = _this$state.isLoaded,\n          posts = _this$state.posts;\n\n      if (!isLoaded) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, \"Loading...\");\n      } else if (posts.length == 0) {\n        return this.createDivForNoStream();\n      } else {\n        var contents = [];\n\n        for (var i = 0; i < posts.length; i++) {\n          contents.push(this.renderPost(posts, i));\n        }\n\n        console.log(contents);\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, contents);\n      }\n    }\n  }]);\n\n  return Streams;\n}(Component);\n\nexport default Streams;","map":{"version":3,"sources":["C:\\Users\\cutep\\reddit-extension\\src\\PostSection.js"],"names":["React","Component","Stream","props","title","Streams","state","isLoaded","posts","data","i","channel","status","request","gameName","gameNameSplit","split","gameUrl","join","open","XMLHttpRequest","openRequest","setRequestHeader","send","onload","JSON","parse","response","setState","streams","bind","length","createDivForNoStream","contents","push","renderPost","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass Stream extends Component {\n  constructor(props) {\n    \n  }\n\n  render() {\n    return (\n      <div>{props.title}</div>\n    );\n  }\n}\n\nclass Streams extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      posts: []\n    };\n  }\n\n  renderPost(data, i) {\n    return (\n      <Stream\n        title = { data[i].channel.status }\n      />\n    );\n  }\n\n  openRequest(request, gameName) {\n    let gameNameSplit = gameName.split(\" \");\n    let gameUrl = gameNameSplit.join(\"%20\");\n\n    request.open(\"GET\", \"https://api.twitch.tv/kraken/streams/?game=\" + gameUrl, true);\n\n    return request;\n  }\n\n  createDivForNoStream() {\n    return (\n      <div>\n        <h1>Invalid game name or no one is streaming this game</h1>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    let gameName = \"Super Smash Bros. Melee\";\n    let request = new XMLHttpRequest();\n    request = this.openRequest(request, gameName);\n    request.setRequestHeader('Client-ID', \"mr14v2oijk1jv4n8u49ixkv6raofcd\");\n    request.send();\n\n    request.onload = function () {\n      let data = JSON.parse(request.response);\n\n      if (request.status >= 200 && request.status < 400) {\n        this.setState({\n          isLoaded: true,\n          posts: data.streams\n        });\n      }\n    }.bind(this);\n  }\n\n  render() {\n    const { isLoaded, posts } = this.state;\n\n    if (!isLoaded) {\n      return <div>Loading...</div>\n    } else if (posts.length == 0) {\n      return  this.createDivForNoStream();\n    } else {\n      let contents = [];\n      for (var i = 0; i < posts.length; i++) {\n        contents.push(this.renderPost(posts, i));\n      }\n      console.log(contents);\n\n      return (\n        <div>\n          { contents }\n        </div>\n      );\n    }\n  }\n}\n\nexport default Streams;\n"]},"metadata":{},"sourceType":"module"}