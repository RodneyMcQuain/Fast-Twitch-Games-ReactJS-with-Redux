{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\src\\\\Header.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport { default as GamesDropdown } from './GamesDropdown';\nimport { default as HeaderStatus } from './HeaderStatus';\n/*gameValue and gameName are separate state variables so that GamesDropdown\r\n  isn't updated everytime something is typed in the textbox. Instead it is\r\n  only updated when the add game button is clicked.*/\n\nvar Header =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Header, _Component);\n\n  function Header(props) {\n    var _this;\n\n    _classCallCheck(this, Header);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Header).call(this, props));\n    _this.state = {\n      games: [],\n      gameName: \"\",\n      gameValue: \"\",\n      statusGood: false,\n      statusBad: false\n    };\n    _this.handleOnChange_tbGame = _this.handleOnChange_tbGame.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleOnClick_btAddGame = _this.handleOnClick_btAddGame.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleOnClick_btRemoveGame = _this.handleOnClick_btRemoveGame.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleOnClick_btMoveGameToTop = _this.handleOnClick_btMoveGameToTop.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setGameComboBoxLocalStorage = _this.setGameComboBoxLocalStorage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setSelectedGameAndComboBoxLocalStorage = _this.setSelectedGameAndComboBoxLocalStorage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setStatus = _this.setStatus.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } //Loads games to from local storage after mount.\n\n\n  _createClass(Header, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var gamesStorage = JSON.parse(localStorage.getItem(\"games\"));\n\n      if (gamesStorage != null && gamesStorage.trim() !== \"\") {\n        var gamesArr = gamesStorage.split(\",;:!\");\n        this.setState({\n          games: gamesArr\n        }, this.setSelectedGame);\n      }\n    }\n    /*Sets statusBad and statusGood based on response from\r\n      HeaderStatus.*/\n\n  }, {\n    key: \"setStatus\",\n    value: function setStatus(statusBad, statusGood) {\n      this.setState({\n        statusBad: statusBad,\n        statusGood: statusGood\n      });\n    }\n  }, {\n    key: \"handleOnClick_btAddGame\",\n    value: function handleOnClick_btAddGame(e) {\n      var _this$state = this.state,\n          games = _this$state.games,\n          gameName = _this$state.gameName;\n\n      for (var i = 0; i < games.length; i++) {\n        if (games[i] == gameName) {\n          this.setState({\n            statusBad: true\n          }, this.setState({\n            statusBad: false\n          }));\n          return;\n        }\n      }\n\n      this.setState({\n        games: games.concat(gameName),\n        gameValue: gameName\n      }, this.setGameComboBoxLocalStorage); //When a game is added it becomes the selected game.\n\n      this.props.handleGameSelectChange(this.state.gameName);\n      /*Clear text box after addition of game and set statusGood\r\n        to true because the addition was successful.*/\n\n      this.setState({\n        gameName: \"\",\n        statusGood: true\n      });\n    }\n  }, {\n    key: \"handleOnClick_btRemoveGame\",\n    value: function handleOnClick_btRemoveGame(e) {\n      var games = this.state.games;\n\n      for (var i = 0; i < games.length; i++) {\n        if (games[i] === this.props.selectedGame) {\n          games.splice(i, 1);\n          break;\n        }\n      }\n\n      this.setState({\n        games: games\n      }, this.setSelectedGameAndComboBoxLocalStorage);\n    }\n  }, {\n    key: \"handleOnClick_btMoveGameToTop\",\n    value: function handleOnClick_btMoveGameToTop(e) {\n      var games = this.state.games;\n\n      for (var i = 0; i < games.length; i++) {\n        if (games[i] === this.props.selectedGame) {\n          games.unshift(games[i]);\n          games.splice(i + 1, 1);\n          break;\n        }\n      }\n\n      this.setState({\n        games: games\n      }, this.setGameComboBoxLocalStorage);\n    }\n  }, {\n    key: \"handleOnChange_tbGame\",\n    value: function handleOnChange_tbGame(e) {\n      this.setState({\n        gameName: e.target.value\n      });\n    }\n    /*Just calls setSelectedGame() and setGameComboBoxLocalStorage(). Used\r\n      for setState callbacks.*/\n\n  }, {\n    key: \"setSelectedGameAndComboBoxLocalStorage\",\n    value: function setSelectedGameAndComboBoxLocalStorage() {\n      this.setSelectedGame();\n      this.setGameComboBoxLocalStorage();\n    }\n    /*Sets the selected game to the first in the array if\r\n      length is greater than 0. Used after removal of a game\r\n      and when initially loading the game dropdown.*/\n\n  }, {\n    key: \"setSelectedGame\",\n    value: function setSelectedGame() {\n      var games = this.state.games;\n      if (games.length > 0) this.props.handleGameSelectChange(games[0]);\n    }\n    /*Sets the local storage after addition, removal, or moving up\r\n      of a game.*/\n\n  }, {\n    key: \"setGameComboBoxLocalStorage\",\n    value: function setGameComboBoxLocalStorage() {\n      var games = this.state.games;\n      var toStoreString = games.join(\",;:!\");\n      localStorage.setItem('games', JSON.stringify(toStoreString));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        id: \"add-game-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        value: this.state.gameName,\n        onChange: this.handleOnChange_tbGame,\n        id: \"tf-game-to-add\",\n        className: \"text-field fa\",\n        placeholder: \"\\uF11B Game to Add\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.handleOnClick_btAddGame,\n        id: \"btn-game-to-add\",\n        className: \"btn fa fa-plus\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(GamesDropdown, {\n        gameValue: this.state.gameValue,\n        games: this.state.games,\n        handleGameSelectChange: this.props.handleGameSelectChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.handleOnClick_btRemoveGame,\n        id: \"btn-game-to-remove\",\n        className: \"btn fa fa-trash\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.handleOnClick_btMoveGameToTop,\n        id: \"btn-game-to-top\",\n        className: \"btn fa fa-arrow-up\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      })), React.createElement(HeaderStatus, {\n        setStatus: this.setStatus,\n        statusGood: this.state.statusGood,\n        statusBad: this.state.statusBad,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Header;\n}(Component);\n\nexport default Header;","map":{"version":3,"sources":["C:\\Users\\cutep\\reddit-extension\\src\\Header.js"],"names":["React","Component","default","GamesDropdown","HeaderStatus","Header","props","state","games","gameName","gameValue","statusGood","statusBad","handleOnChange_tbGame","bind","handleOnClick_btAddGame","handleOnClick_btRemoveGame","handleOnClick_btMoveGameToTop","setGameComboBoxLocalStorage","setSelectedGameAndComboBoxLocalStorage","setStatus","gamesStorage","JSON","parse","localStorage","getItem","trim","gamesArr","split","setState","setSelectedGame","e","i","length","concat","handleGameSelectChange","selectedGame","splice","unshift","target","value","toStoreString","join","setItem","stringify"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport {default as GamesDropdown} from './GamesDropdown';\r\nimport {default as HeaderStatus} from './HeaderStatus';\r\n\r\n/*gameValue and gameName are separate state variables so that GamesDropdown\r\n  isn't updated everytime something is typed in the textbox. Instead it is\r\n  only updated when the add game button is clicked.*/\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      games: [],\r\n      gameName: \"\",\r\n      gameValue: \"\",\r\n      statusGood: false,\r\n      statusBad: false\r\n    }\r\n\r\n    this.handleOnChange_tbGame = this.handleOnChange_tbGame.bind(this);\r\n    this.handleOnClick_btAddGame = this.handleOnClick_btAddGame.bind(this);\r\n    this.handleOnClick_btRemoveGame = this.handleOnClick_btRemoveGame.bind(this);\r\n    this.handleOnClick_btMoveGameToTop = this.handleOnClick_btMoveGameToTop.bind(this);\r\n    this.setGameComboBoxLocalStorage = this.setGameComboBoxLocalStorage.bind(this);\r\n    this.setSelectedGameAndComboBoxLocalStorage = this.setSelectedGameAndComboBoxLocalStorage.bind(this);\r\n    this.setStatus = this.setStatus.bind(this);\r\n  }\r\n\r\n  //Loads games to from local storage after mount.\r\n  componentDidMount() {\r\n    let gamesStorage = JSON.parse(localStorage.getItem(\"games\"));\r\n\r\n    if (gamesStorage != null && gamesStorage.trim() !== \"\") {\r\n      let gamesArr = gamesStorage.split(\",;:!\");\r\n      this.setState({games: gamesArr}, this.setSelectedGame);\r\n    }\r\n  }\r\n\r\n  /*Sets statusBad and statusGood based on response from\r\n    HeaderStatus.*/\r\n  setStatus(statusBad, statusGood) {\r\n    this.setState({\r\n      statusBad: statusBad,\r\n      statusGood: statusGood\r\n    });\r\n  }\r\n\r\n  handleOnClick_btAddGame(e) {\r\n    const { games, gameName } = this.state;\r\n\r\n    for (let i = 0; i < games.length; i++) {\r\n      if (games[i] == gameName) {\r\n        this.setState({statusBad: true}, this.setState({statusBad: false}));\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      games: games.concat(gameName),\r\n      gameValue: gameName\r\n    }, this.setGameComboBoxLocalStorage);\r\n\r\n    //When a game is added it becomes the selected game.\r\n    this.props.handleGameSelectChange(this.state.gameName);\r\n\r\n    /*Clear text box after addition of game and set statusGood\r\n      to true because the addition was successful.*/\r\n    this.setState({\r\n      gameName: \"\",\r\n      statusGood: true\r\n    });\r\n  }\r\n\r\n  handleOnClick_btRemoveGame(e) {\r\n    const games = this.state.games;\r\n\r\n    for (let i = 0; i < games.length; i++)\r\n      if (games[i] === this.props.selectedGame) {\r\n        games.splice(i, 1);\r\n        break;\r\n      }\r\n\r\n    this.setState({games: games}, this.setSelectedGameAndComboBoxLocalStorage);\r\n  }\r\n\r\n\r\n  handleOnClick_btMoveGameToTop(e) {\r\n    const games = this.state.games;\r\n\r\n    for (let i = 0; i < games.length; i++)\r\n      if (games[i] === this.props.selectedGame) {\r\n        games.unshift(games[i]);\r\n        games.splice(i + 1, 1);\r\n        break;\r\n      }\r\n\r\n    this.setState({games: games}, this.setGameComboBoxLocalStorage);\r\n  }\r\n\r\n  handleOnChange_tbGame(e) {\r\n    this.setState({gameName: e.target.value});\r\n  }\r\n\r\n  /*Just calls setSelectedGame() and setGameComboBoxLocalStorage(). Used\r\n    for setState callbacks.*/\r\n  setSelectedGameAndComboBoxLocalStorage() {\r\n    this.setSelectedGame();\r\n    this.setGameComboBoxLocalStorage();\r\n  }\r\n\r\n  /*Sets the selected game to the first in the array if\r\n    length is greater than 0. Used after removal of a game\r\n    and when initially loading the game dropdown.*/\r\n  setSelectedGame() {\r\n    const games = this.state.games;\r\n\r\n    if (games.length > 0)\r\n      this.props.handleGameSelectChange(games[0]);\r\n  }\r\n\r\n  /*Sets the local storage after addition, removal, or moving up\r\n    of a game.*/\r\n  setGameComboBoxLocalStorage() {\r\n    const games = this.state.games;\r\n\r\n    let toStoreString = games.join(\",;:!\");\r\n    localStorage.setItem('games', JSON.stringify(toStoreString));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"add-game-container\">\r\n        <input value={this.state.gameName} onChange={this.handleOnChange_tbGame} id=\"tf-game-to-add\" className=\"text-field fa\" placeholder=\"&#xf11b; Game to Add\"></input>\r\n        <button onClick={this.handleOnClick_btAddGame} id=\"btn-game-to-add\" className=\"btn fa fa-plus\"></button>\r\n\r\n        <div>\r\n          <GamesDropdown gameValue={this.state.gameValue} games={this.state.games} handleGameSelectChange={this.props.handleGameSelectChange} />\r\n          <button onClick={this.handleOnClick_btRemoveGame} id=\"btn-game-to-remove\" className=\"btn fa fa-trash\"></button>\r\n          <button onClick={this.handleOnClick_btMoveGameToTop} id=\"btn-game-to-top\" className=\"btn fa fa-arrow-up\"></button>\r\n        </div>\r\n        <HeaderStatus setStatus={this.setStatus} statusGood={this.state.statusGood} statusBad={this.state.statusBad} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n"]},"metadata":{},"sourceType":"module"}