{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\src\\\\PostSection.js\";\nimport React, { Component } from 'react';\nimport './App.css';\n\nfunction Stream(props) {\n  return React.createElement(\"a\", {\n    href: props.url,\n    target: \"_blank\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: props.thumbnail,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }), React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, props.displayName), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, props.title), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, props.viewers));\n}\n\nvar Streams =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Streams, _Component);\n\n  function Streams(props) {\n    var _this;\n\n    _classCallCheck(this, Streams);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Streams).call(this, props));\n    _this.state = {\n      isLoaded: false,\n      posts: []\n    };\n    return _this;\n  }\n\n  _createClass(Streams, [{\n    key: \"renderPost\",\n    value: function renderPost(data, i) {\n      return React.createElement(Stream, {\n        key: i,\n        thumbnail: data[i].preview.small,\n        title: data[i].channel.status,\n        displayName: data[i].channel.display_name,\n        viewers: data[i].viewers,\n        url: data[i].channel.url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var gameName = \"Super Smash Bros. Melee\";\n      var request = new XMLHttpRequest();\n      request = this.openRequest(request, gameName);\n      request.setRequestHeader('Client-ID', \"mr14v2oijk1jv4n8u49ixkv6raofcd\");\n      request.send();\n\n      request.onload = function () {\n        var streamsApiData = JSON.parse(request.response);\n\n        if (request.status >= 200 && request.status < 400) {\n          this.setState({\n            isLoaded: true,\n            streamsApiData: streamsApiData.streams\n          });\n        }\n      }.bind(this);\n    }\n  }, {\n    key: \"openRequest\",\n    value: function openRequest(request, gameName) {\n      var gameNameSplit = gameName.split(\" \");\n      var gameUrl = gameNameSplit.join(\"%20\");\n      request.open(\"GET\", \"https://api.twitch.tv/kraken/streams/?game=\" + gameUrl, true);\n      return request;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          isLoaded = _this$state.isLoaded,\n          streamsApiData = _this$state.streamsApiData;\n\n      if (!isLoaded) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, \"Loading...\");\n      } else if (streamsApiData.length == 0) {\n        return this.createDivForNoStream();\n      } else {\n        var streams = [];\n\n        for (var i = 0; i < streamsApiData.length; i++) {\n          streams.push(this.renderPost(streamsApiData, i));\n        }\n\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, streams);\n      }\n    }\n  }, {\n    key: \"createDivForNoStream\",\n    value: function createDivForNoStream() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"Invalid game name or no one is streaming this game\"));\n    }\n  }]);\n\n  return Streams;\n}(Component);\n\nexport default Streams;","map":{"version":3,"sources":["C:\\Users\\cutep\\reddit-extension\\src\\PostSection.js"],"names":["React","Component","Stream","props","url","thumbnail","displayName","title","viewers","Streams","state","isLoaded","posts","data","i","preview","small","channel","status","display_name","gameName","request","XMLHttpRequest","openRequest","setRequestHeader","send","onload","streamsApiData","JSON","parse","response","setState","streams","bind","gameNameSplit","split","gameUrl","join","open","length","createDivForNoStream","push","renderPost"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nfunction Stream(props) {\n    return (\n      <a href = { props.url } target = \"_blank\">\n        <img src = { props.thumbnail }></img>\n        <h1>{ props.displayName }</h1>\n        <div>{ props.title }</div>\n        <p>{ props.viewers }</p>\n      </a>\n    );\n}\n\nclass Streams extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      posts: []\n    };\n  }\n\n  renderPost(data, i) {\n    return (\n      <Stream\n        key = { i }\n        thumbnail = { data[i].preview.small }\n        title = { data[i].channel.status }\n        displayName = { data[i].channel.display_name }\n        viewers = { data[i].viewers }\n        url = { data[i].channel.url }\n      />\n    );\n  }\n\n  componentDidMount() {\n    let gameName = \"Super Smash Bros. Melee\";\n    let request = new XMLHttpRequest();\n    request = this.openRequest(request, gameName);\n    request.setRequestHeader('Client-ID', \"mr14v2oijk1jv4n8u49ixkv6raofcd\");\n    request.send();\n\n    request.onload = function () {\n      let streamsApiData = JSON.parse(request.response);\n\n      if (request.status >= 200 && request.status < 400) {\n        this.setState({\n          isLoaded: true,\n          streamsApiData: streamsApiData.streams\n        });\n      }\n    }.bind(this);\n  }\n\n  openRequest(request, gameName) {\n    let gameNameSplit = gameName.split(\" \");\n    let gameUrl = gameNameSplit.join(\"%20\");\n\n    request.open(\"GET\", \"https://api.twitch.tv/kraken/streams/?game=\" + gameUrl, true);\n\n    return request;\n  }\n\n  render() {\n    const { isLoaded, streamsApiData } = this.state;\n\n    if (!isLoaded) {\n      return <div>Loading...</div>\n    } else if (streamsApiData.length == 0) {\n      return  this.createDivForNoStream();\n    } else {\n      let streams = [];\n      for (var i = 0; i < streamsApiData.length; i++) {\n        streams.push(this.renderPost(streamsApiData, i));\n      }\n\n      return (\n        <div>\n          { streams }\n        </div>\n      );\n    }\n  }\n\n  createDivForNoStream() {\n    return (\n      <div>\n        <h1>Invalid game name or no one is streaming this game</h1>\n      </div>\n    );\n  }\n}\n\nexport default Streams;\n"]},"metadata":{},"sourceType":"module"}