{"ast":null,"code":"import _classCallCheck from \"F:\\\\Users\\\\Rodney\\\\Documents\\\\WebDevelopment\\\\react-redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\Users\\\\Rodney\\\\Documents\\\\WebDevelopment\\\\react-redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\Users\\\\Rodney\\\\Documents\\\\WebDevelopment\\\\react-redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\Users\\\\Rodney\\\\Documents\\\\WebDevelopment\\\\react-redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\Users\\\\Rodney\\\\Documents\\\\WebDevelopment\\\\react-redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"F:\\\\Users\\\\Rodney\\\\Documents\\\\WebDevelopment\\\\react-redux\\\\src\\\\containers\\\\Streams.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { default as Stream } from '../components/Stream';\nimport API_KEY from '../config';\nimport '../style/App.css';\n/*Class for the bottom portion of the app, which displays\n  the streams, based on the selected game.*/\n\nvar Streams =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Streams, _Component);\n\n  function Streams(props) {\n    var _this;\n\n    _classCallCheck(this, Streams);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Streams).call(this, props));\n    _this.state = {\n      isLoaded: false,\n      streamsApiData: []\n    };\n    return _this;\n  }\n  /*Makes an API call when component mounts, delayed by 100ms to\n    be sure the selectedGame is not the default, but instead the\n    correct one from local storage.*/\n\n\n  _createClass(Streams, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.apiCall(this.props.selectedGame);\n    }\n    /*If current props and previous props of selected game don't match\n      each other then set the state of isLoaded to false and make an API\n      call to render streams for the new selected game.*/\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.selectedGame !== prevProps.selectedGame) {\n        this.setState({\n          isLoaded: false\n        });\n        this.apiCall(this.props.selectedGame);\n      }\n    } //API call to the Twitch API, using the selected game.\n\n  }, {\n    key: \"apiCall\",\n    value: function apiCall(selectedGame) {\n      var request = new XMLHttpRequest();\n      var gameUrl = this.gameToUrl(selectedGame);\n      request.open(\"GET\", \"https://api.twitch.tv/kraken/streams/?game=\" + gameUrl, true);\n      request.setRequestHeader('Client-ID', API_KEY);\n      request.send();\n\n      request.onload = function () {\n        var streamsApiData = JSON.parse(request.response);\n\n        if (request.status >= 200 && request.status < 400) {\n          this.setState({\n            isLoaded: true,\n            streamsApiData: streamsApiData.streams\n          });\n        }\n      }.bind(this);\n    } //Makes the game name into a valid url.\n\n  }, {\n    key: \"gameToUrl\",\n    value: function gameToUrl(gameName) {\n      var gameNameSplit = gameName.split(\" \");\n      var gameUrl = gameNameSplit.join(\"%20\");\n      return gameUrl;\n    }\n    /*If the API call has not loaded return a div indicating that.\n      If the length of API stream data is 0 create a div indicating that.\n      If there is stream data render divs with the appropriate data.*/\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          isLoaded = _this$state.isLoaded,\n          streamsApiData = _this$state.streamsApiData;\n\n      if (!isLoaded) {\n        return React.createElement(\"div\", {\n          id: \"preloader-overlay\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          id: \"preloader-spinner\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }));\n      } else if (streamsApiData.length === 0) {\n        return this.createDivForNoStream();\n      } else {\n        var streams = [];\n\n        for (var i = 0; i < streamsApiData.length; i++) {\n          streams.push(this.renderStream(streamsApiData, i));\n        }\n\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, streams);\n      }\n    } //Div that's created when there are no streams returned from the API call.\n\n  }, {\n    key: \"createDivForNoStream\",\n    value: function createDivForNoStream() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Invalid game name or no one is streaming this game\"));\n    } //Creates a stream div based on API results.\n\n  }, {\n    key: \"renderStream\",\n    value: function renderStream(data, i) {\n      return React.createElement(Stream, {\n        key: i,\n        thumbnail: data[i].preview.small,\n        title: data[i].channel.status,\n        displayName: data[i].channel.display_name,\n        viewers: data[i].viewers,\n        url: data[i].channel.url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Streams;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(reducer) {\n  return reducer;\n};\n\nexport default connect(mapStateToProps)(Streams);","map":{"version":3,"sources":["F:\\Users\\Rodney\\Documents\\WebDevelopment\\react-redux\\src\\containers\\Streams.js"],"names":["React","Component","connect","default","Stream","API_KEY","Streams","props","state","isLoaded","streamsApiData","apiCall","selectedGame","prevProps","setState","request","XMLHttpRequest","gameUrl","gameToUrl","open","setRequestHeader","send","onload","JSON","parse","response","status","streams","bind","gameName","gameNameSplit","split","join","length","createDivForNoStream","i","push","renderStream","data","preview","small","channel","display_name","viewers","url","mapStateToProps","reducer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {default as Stream} from '../components/Stream';\nimport API_KEY from '../config'\nimport '../style/App.css';\n\n/*Class for the bottom portion of the app, which displays\n  the streams, based on the selected game.*/\nclass Streams extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoaded: false,\n      streamsApiData: []\n    };\n  }\n\n  /*Makes an API call when component mounts, delayed by 100ms to\n    be sure the selectedGame is not the default, but instead the\n    correct one from local storage.*/\n  componentDidMount() {\n    this.apiCall(this.props.selectedGame);\n  }\n\n  /*If current props and previous props of selected game don't match\n    each other then set the state of isLoaded to false and make an API\n    call to render streams for the new selected game.*/\n  componentDidUpdate(prevProps) {\n    if (this.props.selectedGame !== prevProps.selectedGame) {\n      this.setState({isLoaded: false});\n      this.apiCall(this.props.selectedGame);\n    }\n  }\n\n  //API call to the Twitch API, using the selected game.\n  apiCall(selectedGame) {\n    let request = new XMLHttpRequest();\n    let gameUrl = this.gameToUrl(selectedGame);\n    request.open(\"GET\", \"https://api.twitch.tv/kraken/streams/?game=\" + gameUrl, true);\n    request.setRequestHeader('Client-ID', API_KEY);\n    request.send();\n\n    request.onload = function () {\n      let streamsApiData = JSON.parse(request.response);\n\n      if (request.status >= 200 && request.status < 400) {\n        this.setState({\n          isLoaded: true,\n          streamsApiData: streamsApiData.streams\n        });\n      }\n    }.bind(this);\n  }\n\n  //Makes the game name into a valid url.\n  gameToUrl(gameName) {\n    let gameNameSplit = gameName.split(\" \");\n    let gameUrl = gameNameSplit.join(\"%20\");\n\n    return gameUrl;\n  }\n\n  /*If the API call has not loaded return a div indicating that.\n    If the length of API stream data is 0 create a div indicating that.\n    If there is stream data render divs with the appropriate data.*/\n  render() {\n    const { isLoaded, streamsApiData } = this.state;\n\n    if (!isLoaded) {\n      return (\n        <div id=\"preloader-overlay\">\n          <div id=\"preloader-spinner\"></div>\n        </div>\n      );\n    } else if (streamsApiData.length === 0) {\n      return  this.createDivForNoStream();\n    } else {\n      let streams = [];\n      for (let i = 0; i < streamsApiData.length; i++)\n        streams.push(this.renderStream(streamsApiData, i));\n\n      return <div>{ streams }</div>;\n    }\n  }\n\n  //Div that's created when there are no streams returned from the API call.\n  createDivForNoStream() {\n    return (\n      <div>\n        <h1>Invalid game name or no one is streaming this game</h1>\n      </div>\n    );\n  }\n\n  //Creates a stream div based on API results.\n  renderStream(data, i) {\n    return (\n      <Stream\n        key = { i }\n        thumbnail = { data[i].preview.small }\n        title = { data[i].channel.status }\n        displayName = { data[i].channel.display_name }\n        viewers = { data[i].viewers }\n        url = { data[i].channel.url }\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (reducer) => reducer;\n\nexport default connect(mapStateToProps)(Streams);\n"]},"metadata":{},"sourceType":"module"}