{"ast":null,"code":"import _classCallCheck from \"F:\\\\Users\\\\Rodney\\\\Documents\\\\WebDevelopment\\\\react-redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\Users\\\\Rodney\\\\Documents\\\\WebDevelopment\\\\react-redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\Users\\\\Rodney\\\\Documents\\\\WebDevelopment\\\\react-redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\Users\\\\Rodney\\\\Documents\\\\WebDevelopment\\\\react-redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\Users\\\\Rodney\\\\Documents\\\\WebDevelopment\\\\react-redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"F:\\\\Users\\\\Rodney\\\\Documents\\\\WebDevelopment\\\\react-redux\\\\src\\\\Streams.js\";\nimport React, { Component } from 'react';\nimport { default as Stream } from './Stream';\nimport setSelectedGame from './actions';\nimport store from './store';\nimport API_KEY from './config';\nimport './App.css';\n/*Class for the bottom portion of the app, which displays\n  the streams, based on the selected game.*/\n\nvar Streams =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Streams, _Component);\n\n  function Streams(props) {\n    var _this;\n\n    _classCallCheck(this, Streams);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Streams).call(this, props));\n    _this.state = {\n      isLoaded: false,\n      streamsApiData: []\n    };\n    return _this;\n  }\n  /*Makes an API call when component mounts, delayed by 100ms to\n    be sure the selectedGame is not the default, but instead the\n    correct one from local storage.*/\n\n\n  _createClass(Streams, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      setTimeout(function () {\n        var selectedGame = store.getState().selectedGame;\n        store.dispatch(setSelectedGame(selectedGame));\n\n        _this2.apiCall(selectedGame);\n      }, 100);\n    }\n    /*If current props and previous props of selected game don't match\n      each other then set the state of isLoaded to false and make an API\n      call to render streams for the new selected game.*/\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      console.log(this.props.selectedGame + \" pls \" + prevProps.selectedGame);\n\n      if (this.props.selectedGame !== prevProps.selectedGame) {\n        this.setState({\n          isLoaded: false\n        });\n        this.apiCall(this.props.selectedGame);\n      }\n    } //API call to the Twitch API, using the selected game.\n\n  }, {\n    key: \"apiCall\",\n    value: function apiCall(selectedGame) {\n      var request = new XMLHttpRequest();\n      request = this.openRequest(request, selectedGame);\n      request.setRequestHeader('Client-ID', API_KEY);\n      request.send();\n\n      request.onload = function () {\n        var streamsApiData = JSON.parse(request.response);\n\n        if (request.status >= 200 && request.status < 400) {\n          this.setState({\n            isLoaded: true,\n            streamsApiData: streamsApiData.streams\n          });\n        }\n      }.bind(this);\n    } //Makes the game name into a valid url, then opens a request.\n\n  }, {\n    key: \"openRequest\",\n    value: function openRequest(request, gameName) {\n      var gameNameSplit = gameName.split(\" \");\n      var gameUrl = gameNameSplit.join(\"%20\");\n      request.open(\"GET\", \"https://api.twitch.tv/kraken/streams/?game=\" + gameUrl, true);\n      return request;\n    }\n    /*If the API call has not loaded return a div indicating that.\n      If the length of API stream data is 0 create a div indicating that.\n      If there is stream data render divs with the appropriate data.*/\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          isLoaded = _this$state.isLoaded,\n          streamsApiData = _this$state.streamsApiData;\n\n      if (!isLoaded) {\n        return React.createElement(\"div\", {\n          id: \"preloader-overlay\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          id: \"preloader-spinner\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }));\n      } else if (streamsApiData.length === 0) {\n        return this.createDivForNoStream();\n      } else {\n        var streams = [];\n\n        for (var i = 0; i < streamsApiData.length; i++) {\n          streams.push(this.renderStream(streamsApiData, i));\n        }\n\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, streams);\n      }\n    } //Div that's created when there are no streams returned from the API call.\n\n  }, {\n    key: \"createDivForNoStream\",\n    value: function createDivForNoStream() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Invalid game name or no one is streaming this game\"));\n    } //Creates a stream div based on API results.\n\n  }, {\n    key: \"renderStream\",\n    value: function renderStream(data, i) {\n      return React.createElement(Stream, {\n        key: i,\n        thumbnail: data[i].preview.small,\n        title: data[i].channel.status,\n        displayName: data[i].channel.display_name,\n        viewers: data[i].viewers,\n        url: data[i].channel.url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Streams;\n}(Component);\n\nexport default Streams;","map":{"version":3,"sources":["F:\\Users\\Rodney\\Documents\\WebDevelopment\\react-redux\\src\\Streams.js"],"names":["React","Component","default","Stream","setSelectedGame","store","API_KEY","Streams","props","state","isLoaded","streamsApiData","setTimeout","selectedGame","getState","dispatch","apiCall","prevProps","console","log","setState","request","XMLHttpRequest","openRequest","setRequestHeader","send","onload","JSON","parse","response","status","streams","bind","gameName","gameNameSplit","split","gameUrl","join","open","length","createDivForNoStream","i","push","renderStream","data","preview","small","channel","display_name","viewers","url"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {default as Stream} from './Stream'\nimport setSelectedGame from './actions';\n\nimport store from './store';\nimport API_KEY from './config'\nimport './App.css';\n\n/*Class for the bottom portion of the app, which displays\n  the streams, based on the selected game.*/\nclass Streams extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoaded: false,\n      streamsApiData: []\n    };\n  }\n\n  /*Makes an API call when component mounts, delayed by 100ms to\n    be sure the selectedGame is not the default, but instead the\n    correct one from local storage.*/\n  componentDidMount() {\n    setTimeout(() => {\n      let selectedGame = store.getState().selectedGame;\n      store.dispatch(setSelectedGame(selectedGame));\n      this.apiCall(selectedGame);\n    }, 100);\n  }\n\n  /*If current props and previous props of selected game don't match\n    each other then set the state of isLoaded to false and make an API\n    call to render streams for the new selected game.*/\n  componentDidUpdate(prevProps) {\n    console.log(this.props.selectedGame + \" pls \" + prevProps.selectedGame);\n    if (this.props.selectedGame !== prevProps.selectedGame) {\n      this.setState({isLoaded: false});\n      this.apiCall(this.props.selectedGame);\n    }\n  }\n\n  //API call to the Twitch API, using the selected game.\n  apiCall(selectedGame) {\n    let request = new XMLHttpRequest();\n    request = this.openRequest(request, selectedGame);\n    request.setRequestHeader('Client-ID', API_KEY);\n    request.send();\n\n    request.onload = function () {\n      let streamsApiData = JSON.parse(request.response);\n\n      if (request.status >= 200 && request.status < 400) {\n        this.setState({\n          isLoaded: true,\n          streamsApiData: streamsApiData.streams\n        });\n      }\n    }.bind(this);\n  }\n\n  //Makes the game name into a valid url, then opens a request.\n  openRequest(request, gameName) {\n    let gameNameSplit = gameName.split(\" \");\n    let gameUrl = gameNameSplit.join(\"%20\");\n\n    request.open(\"GET\", \"https://api.twitch.tv/kraken/streams/?game=\" + gameUrl, true);\n\n    return request;\n  }\n\n  /*If the API call has not loaded return a div indicating that.\n    If the length of API stream data is 0 create a div indicating that.\n    If there is stream data render divs with the appropriate data.*/\n  render() {\n    const { isLoaded, streamsApiData } = this.state;\n\n    if (!isLoaded) {\n      return (\n        <div id=\"preloader-overlay\">\n          <div id=\"preloader-spinner\"></div>\n        </div>\n      );\n    } else if (streamsApiData.length === 0) {\n      return  this.createDivForNoStream();\n    } else {\n      let streams = [];\n      for (var i = 0; i < streamsApiData.length; i++) {\n        streams.push(this.renderStream(streamsApiData, i));\n      }\n\n      return <div>{ streams }</div>;\n    }\n  }\n\n  //Div that's created when there are no streams returned from the API call.\n  createDivForNoStream() {\n    return (\n      <div>\n        <h1>Invalid game name or no one is streaming this game</h1>\n      </div>\n    );\n  }\n\n  //Creates a stream div based on API results.\n  renderStream(data, i) {\n    return (\n      <Stream\n        key = { i }\n        thumbnail = { data[i].preview.small }\n        title = { data[i].channel.status }\n        displayName = { data[i].channel.display_name }\n        viewers = { data[i].viewers }\n        url = { data[i].channel.url }\n      />\n    );\n  }\n}\n\nexport default Streams;\n"]},"metadata":{},"sourceType":"module"}