{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\cutep\\\\reddit-extension\\\\src\\\\Streams.js\";\nimport React, { Component } from 'react';\nimport { default as Stream } from './Stream';\nimport './App.css';\n\nvar Streams =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Streams, _Component);\n\n  function Streams(props) {\n    var _this;\n\n    _classCallCheck(this, Streams);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Streams).call(this, props));\n    _this.state = {\n      isLoaded: false,\n      posts: [],\n      selectedGame: _this.props.selectedGame\n    };\n    return _this;\n  }\n\n  _createClass(Streams, [{\n    key: \"renderPost\",\n    value: function renderPost(data, i) {\n      return React.createElement(Stream, {\n        key: i,\n        thumbnail: data[i].preview.small,\n        title: data[i].channel.status,\n        displayName: data[i].channel.display_name,\n        viewers: data[i].viewers,\n        url: data[i].channel.url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      console.log(\"we back in it\"); //this.apiCall();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      //let gameName = this.props.selectedGame;\n      //console.log(\"from streams: \" + gameName);\n      this.apiCall();\n    }\n  }, {\n    key: \"apiCall\",\n    value: function apiCall() {\n      var request = new XMLHttpRequest();\n      request = this.openRequest(request, this.state.selectedGame);\n      request.setRequestHeader('Client-ID', \"mr14v2oijk1jv4n8u49ixkv6raofcd\");\n      request.send();\n\n      request.onload = function () {\n        var streamsApiData = JSON.parse(request.response);\n\n        if (request.status >= 200 && request.status < 400) {\n          this.setState({\n            isLoaded: true,\n            streamsApiData: streamsApiData.streams\n          });\n        }\n      }.bind(this);\n    }\n  }, {\n    key: \"openRequest\",\n    value: function openRequest(request, gameName) {\n      var gameNameSplit = gameName.split(\" \");\n      var gameUrl = gameNameSplit.join(\"%20\");\n      request.open(\"GET\", \"https://api.twitch.tv/kraken/streams/?game=\" + gameUrl, true);\n      return request;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          isLoaded = _this$state.isLoaded,\n          streamsApiData = _this$state.streamsApiData;\n\n      if (!isLoaded) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, \"Loading...\");\n      } else if (streamsApiData.length == 0) {\n        return this.createDivForNoStream();\n      } else {\n        var streams = [];\n\n        for (var i = 0; i < streamsApiData.length; i++) {\n          streams.push(this.renderPost(streamsApiData, i));\n        }\n\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, streams);\n      }\n    }\n  }, {\n    key: \"createDivForNoStream\",\n    value: function createDivForNoStream() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Invalid game name or no one is streaming this game\"));\n    }\n  }]);\n\n  return Streams;\n}(Component);\n\nexport default Streams;","map":{"version":3,"sources":["C:\\Users\\cutep\\reddit-extension\\src\\Streams.js"],"names":["React","Component","default","Stream","Streams","props","state","isLoaded","posts","selectedGame","data","i","preview","small","channel","status","display_name","viewers","url","prevProps","prevState","snapshot","console","log","apiCall","request","XMLHttpRequest","openRequest","setRequestHeader","send","onload","streamsApiData","JSON","parse","response","setState","streams","bind","gameName","gameNameSplit","split","gameUrl","join","open","length","createDivForNoStream","push","renderPost"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {default as Stream} from './Stream'\nimport './App.css';\n\nclass Streams extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoaded: false,\n      posts: [],\n      selectedGame: this.props.selectedGame\n    };\n  }\n\n  renderPost(data, i) {\n    return (\n      <Stream\n        key = { i }\n        thumbnail = { data[i].preview.small }\n        title = { data[i].channel.status }\n        displayName = { data[i].channel.display_name }\n        viewers = { data[i].viewers }\n        url = { data[i].channel.url }\n      />\n    );\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    console.log(\"we back in it\");\n    //this.apiCall();\n  }\n\n  componentDidMount() {\n    //let gameName = this.props.selectedGame;\n    //console.log(\"from streams: \" + gameName);\n    this.apiCall();\n  }\n\n  apiCall() {\n    let request = new XMLHttpRequest();\n    request = this.openRequest(request, this.state.selectedGame);\n    request.setRequestHeader('Client-ID', \"mr14v2oijk1jv4n8u49ixkv6raofcd\");\n    request.send();\n\n    request.onload = function () {\n      let streamsApiData = JSON.parse(request.response);\n\n      if (request.status >= 200 && request.status < 400) {\n        this.setState({\n          isLoaded: true,\n          streamsApiData: streamsApiData.streams\n        });\n      }\n    }.bind(this);\n  }\n\n  openRequest(request, gameName) {\n    let gameNameSplit = gameName.split(\" \");\n    let gameUrl = gameNameSplit.join(\"%20\");\n\n    request.open(\"GET\", \"https://api.twitch.tv/kraken/streams/?game=\" + gameUrl, true);\n\n    return request;\n  }\n\n  render() {\n    const { isLoaded, streamsApiData } = this.state;\n\n    if (!isLoaded) {\n      return <div>Loading...</div>\n    } else if (streamsApiData.length == 0) {\n      return  this.createDivForNoStream();\n    } else {\n      let streams = [];\n      for (var i = 0; i < streamsApiData.length; i++) {\n        streams.push(this.renderPost(streamsApiData, i));\n      }\n\n      return (\n        <div>\n          { streams }\n        </div>\n      );\n    }\n  }\n\n  createDivForNoStream() {\n    return (\n      <div>\n        <h1>Invalid game name or no one is streaming this game</h1>\n      </div>\n    );\n  }\n}\n\nexport default Streams;\n"]},"metadata":{},"sourceType":"module"}